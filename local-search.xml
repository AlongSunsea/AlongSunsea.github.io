<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue2后台管理总结</title>
    <link href="/2023/06/19/vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <url>/2023/06/19/vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="vue2后台管理总结"><a href="#vue2后台管理总结" class="headerlink" title="vue2后台管理总结"></a>vue2后台管理总结</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>​这个项目已经做了挺久一段时间了，但是一直也没有花时间来总结一下，只是做完了，就不管了，前端老组长就跟我说了项目无非就是tob和toc，好吧刚听到这两个词一脸懵，他跟我解释也就是前台和中后台项目。这个后台管理项目是我第一个完整完成的，做的时候其中有一些地方没搞懂也就过去了，回过头来重新总结分析一下吧。</p><h2 id="二、前期准备"><a href="#二、前期准备" class="headerlink" title="二、前期准备"></a>二、前期准备</h2><p>Node环境</p><p>安装@vue&#x2F;cli</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i @vue/cli -g<br></code></pre></td></tr></table></figure><p>创建脚手架</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">vue <span class="hljs-keyword">create</span> 脚手架文件夹名<br></code></pre></td></tr></table></figure><h3 id="采用ElementUI组件库，网络请求axios库。"><a href="#采用ElementUI组件库，网络请求axios库。" class="headerlink" title="采用ElementUI组件库，网络请求axios库。"></a>采用ElementUI组件库，网络请求axios库。</h3><ol><li><p>下载element-ui包到当前项目(注意它支持的是Vue2版本项目)</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">npm i <span class="hljs-built_in">add</span> <span class="hljs-keyword">element</span>-ui<br></code></pre></td></tr></table></figure></li><li><p>封装新建<code>src/elementUI/index.js</code>, 在这里进行组件引入和注册</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><br>Vue.use(ElementUI)<br></code></pre></td></tr></table></figure></li><li><p>在main.js中引入, 使其参与到webpack打包并在网页生效</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/elementUI&#x27;</span> <span class="hljs-comment">// 注册elementUI组件</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="封装请求库的思想"><a href="#封装请求库的思想" class="headerlink" title="封装请求库的思想"></a>封装请求库的思想</h3><p>封装项目的请求架构，为后面的请求数据做准备</p><p>项目管理网络请求：</p><p>1）下载axios包到当前项目的文件夹中</p><p>2）封装request请求函数配置基地址</p><p>3）封装api统一接口方法</p><p>4）在逻辑页面，需要用到哪个就引入后调用等待请求的结果，在逻辑页面使用后台返回的数据。</p><p>核心思想：<strong>分层架构</strong></p><p>在任意组件调用封装好的接口方法，接口方法调用统一的axios函数告诉他请求的参数它去请求数据。</p><p><img src="/2023/06/19/vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/axios.png" alt="请求结构"></p><p>安装axios：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i axios<br></code></pre></td></tr></table></figure><p>新建<code>src/utils/request.js</code>项目核心请求方法的模块文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-comment">// 创建一个自定的axios方法(比原axios多了个基地址)</span><br><span class="hljs-comment">// axios函数请求的url地址前面会被拼接基地址, 然后axios请求baseURL+url后台完整地址</span><br><span class="hljs-keyword">const</span> myAxios = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://big-event-vue-api-t.itheima.net&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">// 导出自定义的axios方法, 供外面调用传参发请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> myAxios<br></code></pre></td></tr></table></figure><p>新建<code>src/api/index.js</code>项目接口方法的统一管理模块文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入</span><br><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getList</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-comment">// 这里先用这个接口测试下, 如果url以http开头会忽略baseURL, axios直接请求此地址</span><br><span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://geek.itheima.net/v1_0/channels&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>在任意组件<code>src/App.vue</code>中引入接口请求方式，并请求数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;getList&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getListFn</span>()<br>    &#125;,<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-keyword">async</span> <span class="hljs-title function_">getListFn</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getListAPI</span>()<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种分层架构思想, 可以更好的统一管理项目中所有接口, 并也方便统一给axios方法添加拦截器和修改基地址</p><h3 id="git工具的使用"><a href="#git工具的使用" class="headerlink" title="git工具的使用"></a>git工具的使用</h3><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><p>1.初始化本地git仓库，项目目录下有<code>.git</code>文件夹，保存git相关</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">`git.init`</span><br></code></pre></td></tr></table></figure><p>2.把新建对并配置好的代码暂存，本地提交一次，产生提交记录</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 暂存当前目录下所有的变化文件，到内存中</span><br>git <span class="hljs-built_in">add</span> .<br><span class="hljs-comment"># 本地提交，才真正的被git记录一次在快照磁盘</span><br>git commit -m <span class="hljs-string">&#x27;描述&#x27;</span><br><br></code></pre></td></tr></table></figure><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>将代码保存到远程仓库里面</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git remote add <span class="hljs-built_in">origin</span> 远程仓库地址<br># 只有第一次需要-u <span class="hljs-built_in">origin</span> master ， 以后直接git <span class="hljs-built_in">push</span><br>git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master <br></code></pre></td></tr></table></figure><p>上传成功后可在远程仓库内看到</p><h4 id="新旧项目提交和推送"><a href="#新旧项目提交和推送" class="headerlink" title="新旧项目提交和推送"></a>新旧项目提交和推送</h4><p>开发代码变化后</p><p>保存本地（暂不保存到远程仓库上）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">&#x27;提交说明，方便回滚&#x27;</span><br></code></pre></td></tr></table></figure><p>推送到远程的话才执行</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span><br></code></pre></td></tr></table></figure><h4 id="项目克隆拉取"><a href="#项目克隆拉取" class="headerlink" title="项目克隆拉取"></a>项目克隆拉取</h4><p>第一次克隆下来</p><ul><li>注意: http&#x2F;https开头的地址, 需要账号密码才能克隆&#x2F;推送</li><li>注意; git@开头的地址, 需要ssh秘钥文件配置好, 才能免账号密码克隆&#x2F;推送</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">远程git</span>仓库地址<br></code></pre></td></tr></table></figure><p>多人协同开发一个项目, 别人推送了, 以后直接拉取更新即可</p><blockquote><p>如果提示有冲突, 打开代码, 找到对方商量合并冲突</p><p>前提: 你本地有变化必须暂存提交后, 才能拉取!!!</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure><ul><li><code>git pull</code>：必须连接远程仓库才能用。可以用于下载完整代码更新本地代码。</li><li><code>git clone</code>：只要你想往本地下远程仓库完整的代码就可以用，不用连接远程仓库（连接了也可以）。 不适用于更新本地代码。</li></ul><h2 id="项目-注册登录页面准备"><a href="#项目-注册登录页面准备" class="headerlink" title="项目-注册登录页面准备"></a>项目-注册登录页面准备</h2><p>准备注册和登录页面组件以及路由</p><p>新建注册页面组件，在<code>src/views/register/index.vue</code>中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    Reg.vue<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;my-register&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建登录页面组件，在<code>src/views/login/index.vue</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    Login.vue<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;my-login&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>src/router/index.js</code>配置路由表</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br>Vue.use(VueRouter)<br>const routes = [<br>&#123;<br>path:<span class="hljs-string">&#x27;/reg&#x27;</span>,<br>component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/register&#x27;</span>)<br>&#125;,<br>&#123;<br>path:<span class="hljs-string">&#x27;login&#x27;</span>,<br>component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/register&#x27;</span>)<br>&#125;<br>]<br>const router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>在App.vue组件中，定义<code>&lt;router-view&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="注册-标签布局样式布局"><a href="#注册-标签布局样式布局" class="headerlink" title="注册-标签布局样式布局"></a>注册-标签布局样式布局</h4><p><img src="/2023/06/19/vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93%5C%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2.png" alt="注册页面"></p><p>在<code>src/views/register/index.vue</code>，初始化注册页面的基础布局，并美化样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 注册页面的整体盒子 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reg-container&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注册的盒子 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reg-box&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 标题的盒子 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title-box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 注册的表单区域 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;my-register&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.reg-container</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../../assets/images/login_bg.jpg&#x27;</span>) center;</span><br><span class="language-css">  <span class="hljs-attribute">background-size</span>: cover;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.reg-box</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">335px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">30px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.title-box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../../assets/images/login_title.png&#x27;</span>) center no-repeat;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.btn-reg</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>查找ElementUI组件库，要完成表单组件的布局，并带上基础的校验功能</p><ul><li>1、用户名必须是1-10的大小写字母数字</li><li>2、密码必须是6-15的非空字符</li><li>3、确认密码必须和密码一致</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 注册的表单区域 --&gt;<br>&lt;el-form :model=&quot;regForm&quot; :rules=&quot;regRules&quot; ref=&quot;regRef&quot;&gt;<br>  &lt;!-- 用户名 --&gt;<br>  &lt;el-form-item prop=&quot;username&quot;&gt;<br>    &lt;el-input v-model=&quot;regForm.username&quot; placeholder=&quot;请输入用户名&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;!-- 密码 --&gt;<br>  &lt;el-form-item prop=&quot;password&quot;&gt;<br>    &lt;el-input v-model=&quot;regForm.password&quot; type=&quot;password&quot; placeholder=&quot;请输入密码&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;!-- 确认密码 --&gt;<br>  &lt;el-form-item prop=&quot;repassword&quot;&gt;<br>    &lt;el-input v-model=&quot;regForm.repassword&quot; type=&quot;password&quot; placeholder=&quot;请再次确认密码&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item&gt;<br>    &lt;el-button type=&quot;primary&quot; class=&quot;btn-reg&quot;&gt;注册&lt;/el-button&gt;<br>    &lt;el-link type=&quot;info&quot;&gt;去登录&lt;/el-link&gt;<br>  &lt;/el-form-item&gt;<br>&lt;/el-form&gt;<br><br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;my-register&#x27;,<br>  data () &#123;<br>    const samePwd = (rule, value, callback) =&gt; &#123;<br>      if (value !== this.regForm.password) &#123;<br>        // 如果验证失败，则调用 回调函数时，指定一个 Error 对象。<br>        callback(new Error(&#x27;两次输入的密码不一致!&#x27;))<br>      &#125; else &#123;<br>        // 如果验证成功，则直接调用 callback 回调函数即可。<br>        callback()<br>      &#125;<br>    &#125;<br>    return &#123;<br>      // 注册表单的数据对象<br>      regForm: &#123;<br>        username: &#x27;&#x27;,<br>        password: &#x27;&#x27;,<br>        repassword: &#x27;&#x27;<br>      &#125;,<br>      // 注册表单的验证规则对象<br>      regRules: &#123;<br>        username: [<br>          &#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>          &#123;<br>            pattern: /^[a-zA-Z0-9]&#123;1,10&#125;$/,<br>            message: &#x27;用户名必须是1-10的大小写字母数字&#x27;,<br>            trigger: &#x27;blur&#x27;<br>          &#125;<br>        ],<br>        password: [<br>          &#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>          &#123;<br>            pattern: /^\S&#123;6,15&#125;$/,<br>            message: &#x27;密码必须是6-15的非空字符&#x27;,<br>            trigger: &#x27;blur&#x27;<br>          &#125;<br>        ],<br>        repassword: [<br>          &#123; required: true, message: &#x27;请再次输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>          &#123; pattern: /^\S&#123;6,15&#125;$/, message: &#x27;密码必须是6-15的非空字符&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>          &#123; validator: samePwd, trigger: &#x27;blur&#x27; &#125;<br>        ]<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="注册功能的实现"><a href="#注册功能的实现" class="headerlink" title="注册功能的实现"></a>注册功能的实现</h4><p>完成点击注册按钮的校验和注册功能 </p><p>核心思想：注册就是把用户输入的账号密码做好校验以后 ，收集到变量中，调用接口发送给后台，后台代码把他们存储到数据库中，再给前端返回提示</p><p>注册按钮绑定事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-button type=&quot;primary&quot; class=&quot;btn-reg&quot; @click=&quot;regNewUserFn&quot;&gt;注册&lt;/el-button&gt;<br></code></pre></td></tr></table></figure><p>事件处理函数中，执行表单验证：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>:&#123;<br><span class="hljs-comment">// 注册新用户</span><br><span class="hljs-title function_">regNewUserFn</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">// 表单认证 </span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">regRef</span>.<span class="hljs-title function_">validate</span>(<span class="hljs-function"><span class="hljs-params">valid</span> =&gt;</span>&#123;<br><span class="hljs-keyword">if</span>(!valid) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br><span class="hljs-comment">// 输出得到的内容</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">regForm</span>)<br>&#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 调用后台接口，在<code>src/api/index.js</code>定义</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*注册接口</span><br><span class="hljs-comment">*<span class="hljs-doctag">@param</span> &#123;*&#125; param0 &#123;username:用户名,password：密码,repassword：确认密码&#125;</span><br><span class="hljs-comment">*<span class="hljs-doctag">@returns</span> Promise对象</span><br><span class="hljs-comment">*/</span><br>export <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">registerAPI</span> = (&#123;username,password,repassword&#125;)=&gt;&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">request</span>(&#123;<br><span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/api/reg&#x27;</span>,<br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br><span class="hljs-attr">data</span>:&#123;<br>username,<br>password,<br>repassword<br>&#125;<br>&#125;)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在逻辑页面中引用接口，并在注册逻辑中调用，使用elementUI绑定在Vue全局属性上的$message弹窗方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 注册新用户</span><br>regNewUserFn()&#123;<br><span class="hljs-comment">// 进行表单验证</span><br><span class="hljs-keyword">this</span>.$refs.regRef.validate(async valid=&gt;&#123;<br><span class="hljs-keyword">if</span>(!valid) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br><span class="hljs-comment">// 调用注册接口</span><br><span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">data</span>:res&#125; = await registerAPI(<span class="hljs-keyword">this</span>.regForm)<br>console.log(res)<br><span class="hljs-comment">// 注册失败，提示用户</span><br><span class="hljs-keyword">if</span> (res.code!==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.$message.error(res.message)<br><span class="hljs-comment">// 注册成功</span><br><span class="hljs-keyword">this</span>.$message.success(res.message)<br><span class="hljs-comment">// 跳转到登陆页面</span><br><span class="hljs-keyword">this</span>.$router.push(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>注册的业务逻辑：将前端页面标签准备好，点击事件中走完表单验证逻辑，调用接口传参给后台，根据后台返回的code做前端页面结果的展示</p><h4 id="登录标签布局和表单验证"><a href="#登录标签布局和表单验证" class="headerlink" title="登录标签布局和表单验证"></a>登录标签布局和表单验证</h4><p>在login页面准备好页面标签和样式</p><p><img src="/2023/06/19/vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/vue2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93%5C%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png" alt="登录页面"></p><p>登录页面和注册页面差不多，标签和校验一样，在<code>src/views/login/index.vue</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 登录页面的整体盒子 --&gt;<br>  &lt;div class=&quot;login-container&quot;&gt;<br>    &lt;!-- 登录的盒子 --&gt;<br>    &lt;div class=&quot;login-box&quot;&gt;<br>      &lt;!-- 标题的盒子 --&gt;<br>      &lt;div class=&quot;title-box&quot;&gt;&lt;/div&gt;<br>      &lt;!-- 登录的表单区域 --&gt;<br>      &lt;el-form :model=&quot;loginForm&quot; :rules=&quot;loginRules&quot; ref=&quot;loginRef&quot;&gt;<br>        &lt;!-- 用户名 --&gt;<br>        &lt;el-form-item prop=&quot;username&quot;&gt;<br>          &lt;el-input v-model=&quot;loginForm.username&quot; placeholder=&quot;请输入用户名&quot; maxlength=&quot;10&quot; minlength=&quot;1&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;!-- 密码 --&gt;<br>        &lt;el-form-item prop=&quot;password&quot;&gt;<br>          &lt;el-input<br>            v-model=&quot;loginForm.password&quot;<br>            type=&quot;password&quot;<br>            placeholder=&quot;请输入密码&quot;<br>            maxlength=&quot;15&quot;<br>            minlength=&quot;6&quot;<br>          &gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;el-button type=&quot;primary&quot; class=&quot;btn-login&quot;&gt;登录&lt;/el-button&gt;<br>          &lt;el-link type=&quot;info&quot;&gt;去注册&lt;/el-link&gt;<br>        &lt;/el-form-item&gt;<br>      &lt;/el-form&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;my-login&#x27;,<br>  data () &#123;<br>    return &#123;<br>      // 登录表单的数据对象<br>      loginForm: &#123;<br>        username: &#x27;&#x27;,<br>        password: &#x27;&#x27;<br>      &#125;,<br>      // 登录表单的验证规则对象<br>      loginRules: &#123;<br>        username: [<br>          &#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>          &#123; pattern: /^[a-zA-Z0-9]&#123;1,10&#125;$/, message: &#x27;用户名必须是1-10的字母数字&#x27;, trigger: &#x27;blur&#x27; &#125;<br>        ],<br>        password: [<br>          &#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>          &#123; pattern: /^\S&#123;6,15&#125;$/, message: &#x27;密码必须是6-15的非空字符&#x27;, trigger: &#x27;blur&#x27; &#125;<br>        ]<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.login-container &#123;<br>  background: url(&#x27;../../assets/images/login_bg.jpg&#x27;) center;<br>  background-size: cover;<br>  height: 100%;<br><br>  .login-box &#123;<br>    width: 400px;<br>    height: 270px;<br>    background-color: #fff;<br>    border-radius: 3px;<br>    position: absolute;<br>    left: 50%;<br>    top: 50%;<br>    transform: translate(-50%, -50%);<br>    padding: 0 30px;<br>    box-sizing: border-box;<br><br>    .title-box &#123;<br>      height: 60px;<br>      background: url(&#x27;../../assets/images/login_title.png&#x27;) center no-repeat;<br>    &#125;<br><br>    .btn-login &#123;<br>      width: 100%;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>实现注册页面，点击登录跳转效果，在<code>src/views/register/index.vue</code>，找到对应标签绑定点击事件跳转路由页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-link type=&quot;info&quot; @click=&quot;$router.push(&#x27;/login&#x27;)&quot;&gt;去登录 &lt;/el-link&gt;<br></code></pre></td></tr></table></figure><p>实现登录页面，点击注册跳转效果，在<code>src/views/login/index.vue</code>，找到对应标签绑定点击事件跳转路由页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-link type=&quot;info&quot; @click=&quot;$router.push(&#x27;/reg&#x27;)&quot;&gt;去注册 &lt;/el-link&gt;<br></code></pre></td></tr></table></figure><h4 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h4><p>点击登录按钮，实现登录逻辑</p><p>核心思想：通过表单校验，收集用户输入的内容，调用接口带给后台验证没返回响应结果，再给页面响应结果</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;el-button <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;btn-login&quot;</span> @<span class="hljs-attribute">click</span>=loginFn&gt;登录&lt;/el-link&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂感</title>
    <link href="/2023/06/18/%E6%9D%82%E6%84%9F/"/>
    <url>/2023/06/18/%E6%9D%82%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="杂感"><a href="#杂感" class="headerlink" title="杂感"></a>杂感</h1><p>好久没有更新博客了，经过和老组长交流了一下，以后要坚持持续更新，看了一眼老组长的博客，真的感慨，千里之行始于足下，回想这一学期的学习，我感觉真的学的东西太少了！虽然每天坚持到实验室打卡，不过有效学习的时间真的不多，转眼就大三了，希望能在这个暑假有所收获！加油！</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js原型与原型链</title>
    <link href="/2022/09/21/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2022/09/21/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="一、JS原型与原型链"><a href="#一、JS原型与原型链" class="headerlink" title="一、JS原型与原型链"></a>一、JS原型与原型链</h1><h2 id="（1）JS原型"><a href="#（1）JS原型" class="headerlink" title="（1）JS原型"></a>（1）JS原型</h2><h3 id="①函数对象"><a href="#①函数对象" class="headerlink" title="①函数对象"></a>①函数对象</h3><p>​所有引用类型（Object，Array，Date，Function），都拥有__ proto__(隐式原型)属性，属性值为一个普通的对象。</p><p>​所有函数都拥有prototype属性（显示原型），为函数所特有的属性。</p><p>​原型对象：即prototype属性指向的对象叫做原型对象，当申明一个函数的时候，编译器会自动帮你创建一个与之对应的对象称为原型对象。 每个函数都有一个prototype属性,它是一个指针,指向一个对象,这个对象包含了所有实例共享的属性和方法。</p><h3 id="②构造函数"><a href="#②构造函数" class="headerlink" title="②构造函数"></a>②构造函数</h3><p>​首先先构造一个函数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(name,age)</span>&#123;<br>     <span class="hljs-keyword">this</span>.name=name;<br>     <span class="hljs-keyword">this</span>.age=age;<br>&#125;<br></code></pre></td></tr></table></figure><p>​往原型对象里面添加成员。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Person.prototype.eat=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我要干饭！&#x27;</span>);<br>&#125;;<br>Person.prototype.study=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我要学习！&#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="③实例化对象"><a href="#③实例化对象" class="headerlink" title="③实例化对象"></a>③实例化对象</h3><p>通过new关键字，构建p1，p2实例对象。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">let</span> p<span class="hljs-number">1</span> = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">let</span> p<span class="hljs-number">2</span> = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><p>此时p1，p2可以访问构造函数的原型上的方法，并且p1.eat &#x3D;&#x3D;&#x3D;  p2.eat。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">p1.eat()<span class="hljs-comment">;   //输出&quot;我要干饭！&quot;</span><br>console.log(p1.eat<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>p2.eat)<span class="hljs-comment">;  //输出：true</span><br></code></pre></td></tr></table></figure><p>但注意如果没有使用往原型对象里面添加成员的方法，直接在构造函数内添加方法，在通过实例化对象调用该方法，此时二者<strong>不相等</strong>！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">study</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要学习！&#x27;</span>);<br>     &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">20</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">study</span>===p2.<span class="hljs-property">study</span>);   <span class="hljs-comment">//此时输出：false</span><br></code></pre></td></tr></table></figure><p>这是因为，构造函数的定义方法在实例对象上都创建一遍，上方代码p1和p2都有名为study的方法，但是这两个方法不是同一个Function的实例。实例共享的属性和方法都放在原型对象上，有效解决构造函数内存资源浪费 + 全局变量污染。</p><h3 id="④-proto-属性"><a href="#④-proto-属性" class="headerlink" title="④ __proto__属性"></a>④ <code>__proto__</code>属性</h3><p><code>__proto__</code>:  属于实例对象，可以让实例对象访问原型对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">eat</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要干饭！&#x27;</span>);<br>&#125;;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">study</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要学习！&#x27;</span>);<br>&#125;;<br><br><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">__proto__</span>===<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);   <span class="hljs-comment">//此时输出：true</span><br></code></pre></td></tr></table></figure><p><img src="/2022/09/21/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/01.png" alt="图1"></p><h3 id="⑤constructor属性"><a href="#⑤constructor属性" class="headerlink" title="⑤constructor属性"></a>⑤constructor属性</h3><p>constructor属性，属于原型对象，指向构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">eat</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要干饭！&#x27;</span>);<br>&#125;;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">study</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要学习！&#x27;</span>);<br>&#125;;<br><br><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>===<span class="hljs-title class_">Person</span>); <span class="hljs-comment">//输出为：true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">constructor</span>===<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>);  <span class="hljs-comment">//输出为：true</span><br></code></pre></td></tr></table></figure><p><code>p1.__proto__.constructor</code>可以直接写为<code>p1.constructor</code>，p1可以直接访问原型对象。</p><p><img src="/2022/09/21/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/02.png" alt="图2"></p><h2 id="（2）js原型链"><a href="#（2）js原型链" class="headerlink" title="（2）js原型链"></a>（2）js原型链</h2><h3 id="①引用一个例子"><a href="#①引用一个例子" class="headerlink" title="①引用一个例子"></a>①引用一个例子</h3><p>原型链：每一个对象都有原型，而原型也是对象，也会有自己的原型。以此类推形成链式结构，称之为原型链。</p><p>观察以下代码输出结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">eat</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要干饭！&#x27;</span>);<br>&#125;;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">study</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要学习！&#x27;</span>);<br>&#125;;<br><br><span class="hljs-keyword">let</span> p1 =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>);<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">name</span>);  <span class="hljs-comment">//输出：张三</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">age</span>);<span class="hljs-comment">//输出：18</span><br>p1.<span class="hljs-title function_">eat</span>();<span class="hljs-comment">//输出：我要干饭！</span><br>p1.<span class="hljs-title function_">toString</span>();<span class="hljs-comment">//不报错</span><br>p1.<span class="hljs-title function_">learn</span>();<span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><p>引用<code>p1.eat()</code>，p1的构造函数的原型对象有eat方法，正常输出。但是p1的构造函数的原型对象上没有learn和toString方法，引用<code>p1.learn()</code>，输出报错，调用<code>p1.toString()</code>输出却不报错。这是因为，当调用<code>p1.toString()</code>方法时，p1的构造函数的原型对象上没有toString方法，但是p1的构造函数的<strong>原型对象的原型对象上</strong>有toString方法。</p><p><img src="/2022/09/21/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/03.png" alt="图3"></p><p>检查p1原型的原型。</p><p><img src="/2022/09/21/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/04.png" alt="图4"></p><p>检查p1原型的原型的原型。</p><p><img src="/2022/09/21/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/05.png" alt="图5"></p><p>发现原型链终点为<code>null</code>。</p><h3 id="②画出原型链。"><a href="#②画出原型链。" class="headerlink" title="②画出原型链。"></a>②画出原型链。</h3><p><img src="/2022/09/21/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/06.png" alt="图6"></p><h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>（1）、我们需要牢记两点：①<code>__proto__</code>和<code>constructor</code>属性是对象所独有的；②<code>prototype</code>属性是函数所独有的，因为函数也是一种对象，所以函数也拥有<code>__proto__</code>和<code>constructor</code>属性。</p><p>（2）、<code>prototype</code>属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，即p1.<code>__proto__</code> &#x3D;&#x3D;&#x3D; <code>Person.prototype</code>。</p><p>（3）、<code>__proto__</code>属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<code>__proto__</code>属性所指向的那个对象（父对象）里找，一直找，直到<code>__proto__</code>属性的终点null，再往上找就相当于在null上取值，会报错。通过<code>__proto__</code>属性将对象连接起来的这条链路即我们所谓的原型链。</p><p>（4）、<code>constructor</code>属性的含义就是指向该对象的构造函数，所有函数（此时看成对象了）最终的构造函数都指向Function。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>js原型与原型链</title>
    <link href="/2022/09/21/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2022/09/21/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="一、JS原型与原型链"><a href="#一、JS原型与原型链" class="headerlink" title="一、JS原型与原型链"></a>一、JS原型与原型链</h1><h2 id="（1）JS原型"><a href="#（1）JS原型" class="headerlink" title="（1）JS原型"></a>（1）JS原型</h2><h3 id="①函数对象"><a href="#①函数对象" class="headerlink" title="①函数对象"></a>①函数对象</h3><p>​所有引用类型（Object，Array，Date，Function），都拥有__ proto__(隐式原型)属性，属性值为一个普通的对象。</p><p>​所有函数都拥有prototype属性（显示原型），为函数所特有的属性。</p><p>​原型对象：即prototype属性指向的对象叫做原型对象，当申明一个函数的时候，编译器会自动帮你创建一个与之对应的对象称为原型对象。 每个函数都有一个prototype属性,它是一个指针,指向一个对象,这个对象包含了所有实例共享的属性和方法.</p><h3 id="②构造函数"><a href="#②构造函数" class="headerlink" title="②构造函数"></a>②构造函数</h3><p>​首先先构造一个函数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(name,age)</span>&#123;<br>     <span class="hljs-keyword">this</span>.name=name;<br>     <span class="hljs-keyword">this</span>.age=age;<br>&#125;<br></code></pre></td></tr></table></figure><p>​往原型对象里面添加成员。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Person.prototype.eat=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我要干饭！&#x27;</span>);<br>&#125;;<br>Person.prototype.study=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我要学习！&#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="③实例化对象"><a href="#③实例化对象" class="headerlink" title="③实例化对象"></a>③实例化对象</h3><p>通过new关键字，构建p1，p2实例对象。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">let</span> p<span class="hljs-number">1</span> = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">let</span> p<span class="hljs-number">2</span> = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><p>此时p1，p2可以访问构造函数的原型上的方法，并且p1.eat &#x3D;&#x3D;&#x3D;  p2.eat。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">p1.eat();   <span class="hljs-regexp">//</span>输出<span class="hljs-string">&quot;我要干饭！&quot;</span><br>console.log(p1.eat===p2.eat;  <span class="hljs-regexp">//</span>输出<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p>但注意如果没有使用往原型对象里面添加成员的方法，直接在构造函数内添加方法，在通过实例化对象调用该方法，此时二者<strong>不相等</strong>！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">study</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要学习！&#x27;</span>);<br>     &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">20</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">study</span>===p2.<span class="hljs-property">study</span>);   <span class="hljs-comment">//此时输出&quot;false&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客之博客的搭建</title>
    <link href="/2022/09/02/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/09/02/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). --><p>欢迎来到我的博客，这是一只在校大学生的学习日常，第一次搭建好博客，分享一下我的搭建步骤！本文是基于Hexo框架来构建个人博客的，整个过程十分简单，如果顺利的话，可能只需要10-20分钟就可以完美构建部署好一个专属于你的个人博客了，由于自己也是根据网上资料搭建好的，自己也会陈列出自己遇到的麻烦，还有各个步骤的具体操作链接，方便大家少走弯路。</p><h2 id="前期环境搭建"><a href="#前期环境搭建" class="headerlink" title="前期环境搭建"></a>前期环境搭建</h2><h3 id="Github账号的注册"><a href="#Github账号的注册" class="headerlink" title="Github账号的注册"></a>Github账号的注册</h3><p>搭建博客首先需要注册Github账号，在浏览器内搜索github进入主页就行。具体详细的步骤可以点击下方链接</p><p>More info: <a href="https://blog.csdn.net/qq_44659434/article/details/118613795?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166210801816782350850836%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166210801816782350850836&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-118613795-null-null.142%5Ev44%5Epc_rank_34_ctr25&utm_term=hexo%E6%9B%B4%E6%8D%A2%E5%A4%B4%E5%83%8F&spm=1018.2226.3001.4187">GItHub的注册</a></p><h3 id="Git和Node-js的安装"><a href="#Git和Node-js的安装" class="headerlink" title="Git和Node.js的安装"></a>Git和Node.js的安装</h3><p>都是一些简单的安装，直接去官网下载就好了，不过由于官方下载地址在国外，不搭梯子的话下载速度会比较慢。</p><!-- #``` bash# $ hexo server#``` --><p>More info: <a href="https://git-scm.com/downloads">Git下载</a> <a href="http://nodejs.cn/">Node.js下载</a></p><!-- ### Generate static files --><h2 id="博客框架Hexo的搭建"><a href="#博客框架Hexo的搭建" class="headerlink" title="博客框架Hexo的搭建"></a>博客框架Hexo的搭建</h2><h3 id="Github仓库的搭建"><a href="#Github仓库的搭建" class="headerlink" title="Github仓库的搭建"></a>Github仓库的搭建</h3><p>首先进入注册完Github账号之后登录进入Github主页</p><!-- <img src="/img/blog1.png" width:"100" height:"100"/> --><p><img src="/2022/09/02/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/blog1.png" alt="图片"></p><!-- #``` bash#$ hexo generate#``` --><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
